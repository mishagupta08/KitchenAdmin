@model InventoryManagement.Entity.Common.SalesReport
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "SalesReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool IsSoldByHo = (Session["LoginUser"] as User).IsSoldByHo;
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;

}

<style>
    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }
     .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }
    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }

    .input-readonly {
        background-color: #EBEBE4;
    }
</style>
<script type="text/javascript">
    var grid, dialog;
    var IsYes = false;
    var BillWiseGrid = [{}];
    var PreviouslySelectedFromDate = "";
    var PreviouslySelectedToDate = "";
    var PreviouslySelectedToPickerDate = "";
    var PreviouslySelectedFromPickerDate = "";
    var SalesType = "BillWise";
    var IsCustomerFilter = false;
    var IsDateFilter = false;
    var FromDate = "", ToDate = "";
    var CustomerId = "";
    var IsParty = false;
    var PartyList = [];
    var FullPartyList;
    $(document).ready(function () {
        var IsAdministrator='@IsSoldByHo';
        if (IsAdministrator=="True") {
            GetAllParty();
        }
        else{
            @*$("#PartyName").val('@CurrentPartyName');
            $("#PartyName").prop("readonly", "readonly");*@
            $("#PartyCode").val('@CurrentPartyCode');
        }
        $(".preloader").hide();
        $("#hiddenInvoiceType").val("");
        $("#InvoiceType").change(function () {
            var SelectedVal = $("#InvoiceType").val();
            $("#hiddenInvoiceType").val(SelectedVal);
        });
        $('#CustCode').focusout(function () {
            //console.log("checked");
            //var FromDate = $('#StartDate').val();
            //var ToDate = $('#EndDate').val();
            CustomerId = $('#CustCode').val();
            @*FromDate=$("#StartDate").val();
            ToDate=$("#EndDate").val();
            if (FromDate == "" || FromDate == null) {
                //  OpenDialog("dialogMessage", "Invalid From Date!", "false");
                FromDate = "All";
            }
            if (ToDate == "" || ToDate == null) {
                ToDate == "All";
             //   OpenDialog("dialogMessage", "Invalid To Date!", "false");
            }


            GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");*@



        });
        @*$('#StartDate').focusout(function () {
            //console.log("checked");
            var FromDate = $('#StartDate').val();
            var ToDate = $('#EndDate').val();
            CustomerId = $('#CustCode').val();
            GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");



        });
        $('#EndDate').focusout(function () {
            //console.log("checked");

            var FromDate = $('#StartDate').val();
            var ToDate = $('#EndDate').val();
            CustomerId = $('#CustCode').val();
            GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");



        });*@
        $('#IsCustomerFilter').on('ifChecked', function () {
            //console.log("checked");
            IsCustomerFilter = true;
            $("#CustCode").val("All");
            $("#CustCode").prop("readonly", "readonly");
            CustomerId = $('#CustCode').val();
            // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), CustomerId, '@CurrentPartyCode', "S");

        });
        $('#IsCustomerFilter').on('ifUnchecked', function () {
            //console.log("checked");
            IsCustomerFilter = false;
            $("#CustCode").val("");
            $("#CustCode").prop("readonly", "");
            CustomerId = "";

        });
        $('#IsDateFilter').on('ifChecked', function () {
            //console.log("checked");
            IsDateFilter = true;
            $("#StartDate").val("All");
            $("#StartDate").prop("readonly", "readonly");
            FromDate = "";
            ToDate = "";
            $("#EndDate").val("All");
            $("#EndDate").prop("readonly", "readonly");
            //var CustomerId = $('#CustCode').val();
            // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), CustomerId, '@CurrentPartyCode', "S");
        });
        $('#IsDateFilter').on('ifUnchecked', function () {
            //console.log("checked");
            IsDateFilter = false;
            $("#StartDate").val("");
            $("#StartDate").prop("readonly", "");
            $("#EndDate").val("");
            $("#EndDate").prop("readonly", "");
            FromDate = "";
            ToDate = "";
        });

        $("#StartDate").datetimepicker({


            format: 'DD-MM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {
            // console.log(e.date);
            // fromDate = $('#FromDatePickerWidget').val();
            var selectedDate = e.date._d;
            console.log(selectedDate.getMonth()+1);
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            console.log(lengthOfMonth);
            console.log(selectedDate.getMonth() + 1);
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            console.log(lengthOfMonth);
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);

            var newFromDate = selectedDate.getDate() + "-" + twoDigitMonth + "-" + selectedDate.getFullYear();
            console.log("newDate", newFromDate);
            FromDate = newFromDate;
            PreviouslySelectedFromPickerDate = newFromDate;
            console.log("FromDate", FromDate);
            ToDate = PreviouslySelectedToPickerDate;
           // console.log("ToDate from textbox",($("#EndDate").val()));
            //End Date
            //if (FromDate == null || FromDate=="") {
            //    // OpenDialog("dialogMessage", "Invalid From Date!", "false");
            //    FromDate = "All";
            //}
           @* else{
            var d1 = new Date(FromDate);
            var d2 = new Date(ToDate);
            if (d1 > d2) {
                if (d2 != undefined && d2 != null && d2 != "" && d2!="All") {
                   // OpenDialog("dialogMessage", "From Date is greater than To Date!", "false");
                }
            }
            else {
                if (d1 == null || d1 == "") {
                    FromDate = "All";
                    //  var CustomerId = $('#CustCode').val();
                    //GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");
                }
                if (d2 == null || d2 == "") {
                    ToDate = "All";
                }
            }
             }*@
            // fillGrid();
        });
        $("#EndDate").datetimepicker({


            format: 'DD-MM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {
            // console.log(e.date);
            // fromDate = $('#FromDatePickerWidget').val();
            var selectedDate = e.date._d;

            console.log(selectedDate.getMonth() + 1);
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            console.log(lengthOfMonth);
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);

            var newToDate = selectedDate.getDate() + "-" + twoDigitMonth + "-" + selectedDate.getFullYear();
            console.log("newToDate", newToDate);
            ToDate = newToDate;
            PreviouslySelectedToPickerDate = newToDate;
            console.log("ToDate in picker", ToDate);
            FromDate = PreviouslySelectedFromPickerDate;
            //if (ToDate == null || ToDate == "") {
            //    ToDate = "All";
            //    //OpenDialog("dialogMessage", "Invalid To Date!", "false");
            //}
            @* else {
                var d1 = new Date(FromDate);
                var d2 = new Date(ToDate);
                if (d1 > d2) {
                    if (d2 != undefined && d2 != null && d2 != "" && d2!="All") {
                       // OpenDialog("dialogMessage", "To Date is less than From Date!", "false");
                    }
                }
                else {
                    if (d1 == null || d1=="") {
                        FromDate = "All";
                      //  var CustomerId = $('#CustCode').val();
                        //GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");
                    }
                    if(d2==null || d2=="") {
                        ToDate = "All";
                    }
                }
            }*@
            // fillGrid();
        });

        $("#btnExport").on('click', function () {
            //var tableToExcel = new TableToExcel();
            // tableToExcel.render("grid");
            var UserTypeStr = "BillWiseSalesReport";

            //$("#grid").table2excel({
            //    exclude: ".noExl",
            //    name: UserTypeStr + "_Export",
            //    filename: UserTypeStr + "_Export",
            //    fileext: ".xls",
            //});
            console.log("in export gridExport", BillWiseGrid);
            var tableString = "<thead><tr>";
            tableString += "<th>S.No.</th>";
            tableString += "<th>Bill No.</th>";
            tableString += "<th>Bill Date</th>";
            tableString += "<th>Introducer PC ID</th>";
            tableString += "<th>UserName</th>";
            tableString += "<th>Mobile No</th>";
            tableString += "<th>Customer Code</th>";
            tableString += "<th>Cust. Name</th>";
            tableString += "<th>City</th>";
            tableString += "<th>FV</th>";
            tableString += "<th>RV</th>";
            tableString += "<th>Total Qty</th>";
            tableString += "<th>Net Amount</th>";

            tableString += "</tr></thead><tbody>";
            for (var i = 0; i < BillWiseGrid.length; i++) {
                tableString += "<tr>";
                tableString += "<td>" + BillWiseGrid[i].SNo + "</td>";
                tableString += "<td>" + BillWiseGrid[i].BillNo + "</td>";
                tableString += "<td>" + BillWiseGrid[i].BillDate + "</td>";
                tableString += "<td>" + BillWiseGrid[i].RefIDNo + "</td>";
                tableString += "<td>" + BillWiseGrid[i].UserName + "</td>";
                tableString += "<td>" + BillWiseGrid[i].MobileNo + "</td>";
                tableString += "<td>" + BillWiseGrid[i].Code + "</td>";
                tableString += "<td>" + BillWiseGrid[i].Name + "</td>";
                tableString += "<td>" + BillWiseGrid[i].city + "</td>";
                tableString += "<td>" + BillWiseGrid[i].FV + "</td>";
                tableString += "<td>" + BillWiseGrid[i].RV + "</td>";
                tableString += "<td>" + BillWiseGrid[i].TotalQty + "</td>";
                
                tableString += "<td>" + BillWiseGrid[i].NetAmount + "</td>";

                tableString += "</tr>";
            }


            tableString += "</tbody>";
            $("#gridExport").empty();
            $("#gridExport").append(tableString);
            tableToExcel('gridExport', UserTypeStr + "_Export");

        });
        $("#btnShowReport").on('click', function () {
            $(".preloader").show();
            var PartyCode = $("#PartyCode").val();
            var FType = $("#FType").val();
            
            var DateError = false;
            if (FromDate != "" && FromDate != null && ToDate != null && ToDate != "") {                
                var d1 = toDate(FromDate);
                var d2 = toDate(ToDate);                
                if (d1 > d2) {
                    DateError = true;
                    $(".preloader").hide();
                    OpenDialog("dialogMessage", "From Date should be less than ToDate!", "false");                   
                }
                else {
                    DateError = false;                    
                }
            }
            else {
                DateError = false;
                console.log("PreviouslySelectedFromDate", PreviouslySelectedFromDate);
                console.log("PreviouslySelectedToDate", PreviouslySelectedToDate);
                if (IsDateFilter == false) {
                    //if (FromDate == "" || FromDate == null) {
                    //    FromDate=PreviouslySelectedFromDate;
                    //}
                    //if (ToDate == "" || ToDate == null) {
                    //    ToDate = PreviouslySelectedToDate;
                    //}
                }
                if (FromDate == "" || FromDate == null) {
                    FromDate = "All";
                    //OpenDialog("dialogMessage", "Please enter from date!", "false");
                } if (ToDate == "" || ToDate == null) {
                    ToDate = "All";
                    // OpenDialog("dialogMessage", "Please enter to date!", "false");
                }
            }
            if (CustomerId == "" || CustomerId == null) {
                CustomerId = "All";
                //OpenDialog("dialogMessage", "Please enter IdNo!", "false");
            }

            if (DateError == false) {
                //FromDate = toDate(FromDate);
                //ToDate = toDate(ToDate);


                //if (FromDate != "All") {
                //    PreviouslySelectedFromDate = FromDate;
                //    //var splitDate = FromDate.split("-");
                //    //FromDate = splitDate[2] + "-" + splitDate[1] + "-" + splitDate[0];
                //}
                //if (ToDate != "All") {
                //    PreviouslySelectedToDate = ToDate;
                //    //var splitToDate = ToDate.split("-");
                //    //ToDate = splitToDate[2] + "-" + splitToDate[1] + "-" + splitToDate[0];
                //}
                console.log("FromDate", FromDate);
                console.log("ToDate", ToDate);
                var InvoiceTypeVal=$("#hiddenInvoiceType").val();

                $.ajax({
                    url: '@Url.Action("GetSalesReport", "Report")',
                    type: 'POST',
                    data: { "FromDate": FromDate, "ToDate": ToDate, "CustomerId": CustomerId, "ProductCode": "", "CategoryCode": "", "PartyCode": PartyCode, "BType": "S", "SalesType": SalesType, "InvoiceType": InvoiceTypeVal, "FType": FType},

                    dataType: "json",
                    success: function (objResult) {
                        BillWiseGrid = [{}];
                        console.log("objResult", objResult);
                        //if (objResult[0].ErrorMsg != null || objResult[0].ErrorMsg != "" || objResult[0].ErrorMsg != undefined) {
                        //    console.log("objResult[0].ErrorMsg", objResult[0].ErrorMsg);
                        //}
                        //if (objResult != null) {
                        //    alert("objResult", objResult);
                        //}
                        if (objResult.length > 0) {

                            BillWiseGrid = BillWiseGrid.splice(1);
                            for (var i = 0; i < objResult.length; i++) {
                                var dateObj = new Date(objResult[i].BillDate.match(/\d+/)[0] * 1);
                                var myDate = (dateObj.getDate()) + "/" + (dateObj.getMonth() + 1) + "/" + dateObj.getFullYear();
                                var InvoicePath = '@Url.Action("InvoicePrint", "Transaction", new {Pm="-1"})';

                                var encodedparameters = objResult[i].BillNo;
                                //console.log("encodedparameters", encodedparameters);
                                //encodedparameters="uid=testuser&pwd=test123456&Id=84503&Name=tes&Email=abc@xyz.com&MobileNo=9829898298&Address=Bhl";
                                var EncryptedB64Url = window.btoa(encodedparameters);
                                console.log("EncryptedB64Url", EncryptedB64Url);
                                InvoicePath = InvoicePath.replace("-1", EncryptedB64Url);
                                var FV = 0;
                                var RV = 0;
                                if (objResult[i].BillType == "B") {
                                    FV = objResult[i].TotalBV;
                                }
                                else {
                                    RV = objResult[i].TotalBV;
                                }
                                var TaxAmount = objResult[i].IGSTAmount + objResult[i].CGSTAmount + objResult[i].SGSTAmount;
                                BillWiseGrid.push({ "RefIDNo":objResult[i].RefIDNo,"BillType":objResult[i].BillType,"FV":FV,"RV":RV,"UserName": objResult[i].UserName, "TotalQty": objResult[i].TotalQty, "city": objResult[i].City, "MobileNo": objResult[i].MobileNO, "InvoicePath": InvoicePath, "SNo": i + 1, "BillNo": objResult[i].BillNo, "BillDate": myDate, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "Code": objResult[i].CustCode, "Name": objResult[i].CustName, "Amount": objResult[i].Amount, "TaxAmount": TaxAmount, "IGSTAmount": objResult[i].IGSTAmount, "CGSTAmount": objResult[i].CGSTAmount, "SGSTAmount": objResult[i].SGSTAmount, "NetAmount": objResult[i].NetAmount });
                            }

                        }

                        fillGrid();
                        //$("#StartDate").val("");
                        //$("#EndDate").val("");
                        //if (PreviouslySelectedFromDate != "All") {
                        //    FromDate = PreviouslySelectedFromDate;// $("#StartDate").val();
                        //}
                        //if (PreviouslySelectedToDate != "All") {
                        //    ToDate = PreviouslySelectedToDate// $("#EndDate").val();
                        //}
                        $(".preloader").hide();
                    },
                    error: function (xhr, data) {
                        //  return false;
                        console.log(xhr);
                        console.log("Error:", data);
                    }
                });
            }
        });

        $("#PartyName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(PartyList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#PartyName").val(ui.item.label);
                SetSpecificCode("Party", ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $('#IsParty').on('ifChecked', function () {
            //console.log("checked");
            IsParty = true;
            //$("#PartyName").val("All");
            //$("#PartyName").prop("readonly", "readonly");
            //$("#PartyCode").val(0);
            $("#PartyName").val('All');
            $("#PartyName").prop("readonly", "readonly");
            $("#PartyCode").val('0');
        });

        $('#IsParty').on('ifUnchecked', function () {
            //console.log("checked");
            IsParty = false;
            //$("#PartyName").val("");
            //$("#PartyName").prop("readonly", "");
            //$("#PartyCode").val("");
            $("#PartyName").val('');
            $("#PartyName").prop("readonly", "");
            $("#PartyCode").val('');
        });

    });

    function SetSpecificCode(type, label) {

        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#PartyCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
    }

    function GetAllParty() {
        $.ajax({
            url: '/Report/GetAllPartyListForReports',
            dataType: 'JSON',
            method: 'GET',
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullPartyList = data;
                PartyList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        PartyList.push(data[i].PartyName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    function toDate(dateStr) {
        var parts = dateStr.split("-");
        return new Date(parts[2], parts[1] - 1, parts[0]);
    }
    //function toDateFormat(dateStr) {
    //    var parts = dateStr.split("-");
    //    return new Date(parts[2], parts[1] - 1, parts[0]);
    //}
    function OpenDialog(dialogId, Message, isConfirmation) {
        $("#" + dialogId).empty();
        $("#" + dialogId).append('<p>' + Message + '</p>');
        if (isConfirmation == "true") {
            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "Yes",
                    id: "btnYes" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = true;
                        $("#" + dialogId).dialog("close");


                    }
                },
                {
                    text: "No",
                    id: "btnNo" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = false;
                        $("#" + dialogId).dialog("close");
                    }
                }
                ]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }
        else {


            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "OK",
                    id: "btn" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}

                        $("#" + dialogId).dialog("close");


                    }
                }]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }

    }
    function fillGrid() {
        console.log("BillWiseGrid", BillWiseGrid);

        // BillWiseGrid = BillWiseGrid.splice(1);

        $("#noRecord").hide();
        //console.log("ProductGrid", ProductGrid);
        if (grid != null) {
            grid.destroy();
            $('#grid').empty();

        }

        grid = $('#grid').grid({
            dataSource: BillWiseGrid,
            uiLibrary: 'bootstrap',
            headerFilter: true,
            columns: [
                { field: 'SNo', title: 'S.No.',width:80, sortable: true, hidden: false, filterable: false },
                 { field: 'BillNo', title: 'Bill No', width:100, sortable: true, hidden: false, filterable: true, tmpl: '<a target="_blank" style="text-decoration:underline;color:blue" href={InvoicePath}>{BillNo}</a>', align: 'center' },
                  { field: 'BillDate', title: 'Bill Date', width: 100, sortable: true, hidden: false, filterable: true },
                  { field: 'RefIDNo', title: 'Introducer PC ID ', width: 90, sortable: true, hidden: false, filterable: true },
                   { field: 'PartyCode', title: 'Party Code', width: 90, sortable: true, hidden: true, filterable: true },
                    { field: 'PartyName', title: 'Party Name', width: 150, sortable: true, hidden: true, filterable: true },
                    { field: 'UserName', title: 'UserName', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'Code', title: 'Customer Code', width: 100, sortable: true, hidden: false, filterable: true },
                        { field: 'Name', title: 'Cust. Name', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'MobileNo', title: 'Mobile No', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'city', title: 'City Name', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'FV', title: 'FV', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'RV', title: 'RV', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'TotalQty', title: 'Total Quantity', width: 150, sortable: true, hidden: false, filterable: true },
                        { field: 'NetAmount', width: 80, title: 'Net Amount', sortable: true, hidden: false, filterable: true },

            ],
            pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
        });


    }

    //function GetSalesDetails() {


    //}
</script>
<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Sales Report</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">

            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Bill Wise</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="BillWiseSalesForm" method="post" name="BillWiseSalesForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">
                       
                        @Html.HiddenFor(m => m.PartyCode, new { id = "PartyCode", name = "PartyCode" })
                        @Html.HiddenFor(m => m.InvoiceType, new { id = "hiddenInvoiceType", name = "hiddenInvoiceType"})
                       
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            From Date @*<span class="required">*</span>*@
                                        </label>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.StartDate, new { name = "StartDate", id = "StartDate", tabindex = "1", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            To Date @*<span class="required">*</span>*@
                                        </label>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.EndDate, new { name = "EndDate", id = "EndDate", tabindex = "2", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsDateFilter" name="IsDateFilter" class="flat" tabindex="3" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                            </div>
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        CustomerId No @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-9 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.CustCode, new { name = "CustCode", id = "CustCode", tabindex = "4", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsCustomerFilter" name="IsCustomerFilter" class="flat" tabindex="5" />
 </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (IsSoldByHo)
                        {
                            <div class="col-lg-12">
                                <div class="col-lg-8">
                                    <div class="form-group">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            Enter Party
                                        </label>
                                        <div class="col-lg-9 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.PartyName, new { name = "PartyName", id = "PartyName", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        <div id="IsPartyDiv">
                                            <label>
                                                <input type="checkbox" id="IsParty" name="IsParty" class="flat" tabindex="6" />


                                            </label>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="col-lg-12">
                           
                            <div class="form-group">
                                <div class="col-lg-12" >
                                    <div class="col-lg-8">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name" style="padding-left:0px;padding-right:0px">
    Invoice Type
</label>
<div class="col-lg-3 col-md-3 col-sm-3 col-xs-12" style="padding-left: 0;">

    @Html.DropDownListFor(m => m.InvoiceType, ViewBag.InvoiceTypes as IEnumerable<SelectListItem>, new { name = "InvoiceType", id = "InvoiceType", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
</div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12" style="padding-left: 0.5%;">

                                                @Html.DropDownListFor(m => m.FType, new SelectList(new List<SelectListItem>{
                                           new SelectListItem { Text="--Party Type--",Value="A"},
                                           new SelectListItem { Text="Distributor",Value="M"},
                                           new SelectListItem { Text="Party",Value="D"} }, "Value", "Text"), new { @class = "form-control", @id = "FType" })
                                            </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3">
                                            &nbsp;
                                         </div> 
                                        </div>
                                    <div class="col-lg-4">
                                        <div class="form-group">
                                            <input type="button" id="btnShowReport" name="btnShowReport" value="Show Report" />
                                            <img src="~/images/ExcelImage.jpg" id="btnExport" style="margin-right: 60%;height: 25px;cursor:pointer;float:right" />
                                        </div>
                                    </div>
                                    
                                </div>
                                <br /><br /><br /><center><div class="loader" style="display:none"></div></center>
                                <table class="table bootstrap-datatable" id="grid"></table>
                                <center><span style="display:none" id="noRecord">No Records Found</span></center>


                            </div>
                        </div>

                        <table id="gridExport" style="display:none"></table>

                    </form>
                </div>

            </div>
        </div>
    </div>
    <div id="dialogMessage" title="Message">

    </div>

</div>

