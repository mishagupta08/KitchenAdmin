@model InventoryManagement.Entity.Common.StockReportModel
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "StockReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool IsSoldByHo = (Session["LoginUser"] as User).IsSoldByHo;
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;
    // var ProductListJson = ViewBag.ProductJsonList;
}

<style>
    .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }
    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }

    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }
    .input-readonly{
        background-color:#EBEBE4;

    }

</style>
<script type="text/javascript">
    var grid, dialog;
    var StockGrid = [{}];
    var IsBatch = false;
    var tableStockGrid;
    var StockType = "CurrentStock";
    var IsCategory = false;
    var IsProduct = false;
    var IsParty = false;

    var FromDate = "", ToDate = "";
    var PreviouslySelectedFromDate = "";
    var PreviouslySelectedToDate = "";
    var PreviouslySelectedToPickerDate = "";
    var PreviouslySelectedFromPickerDate = "";
    var ProductList = [];
    var FullProductList;
    var PartyList = [];
    var StallList = [];
    var FullPartyList;
    var CategoryList = [];
    var FullCategoryList;
    var IsDateFilter = false;
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var TotalQty = 0;

    $(document).ready(function () {

        GetAllCategory();
        GetAllProducts(0);
        $(".preloader").hide();
        // FullProductList = ProductListJson;
        var IsAdministrator = '@IsSoldByHo';
        console.log("IsAdministrator", IsAdministrator);
        if (IsAdministrator=="True") {
            GetAllParty();
        }
        else{
            @*$("#PartyName").val('@CurrentPartyName');
            $("#PartyName").prop("readonly", "readonly");*@
            console.log("in else party",'@CurrentPartyCode');
            $("#PartyCode").val('@CurrentPartyCode');
       }


        $('#IsDateFilter').on('ifChecked', function () {
            IsDateFilter = true;
            $("#StartDate").val("All");
            $("#StartDate").prop("readonly", "readonly");
            $("#EndDate").val("All");
            $("#EndDate").prop("readonly", "readonly");
            FromDate = "";
            ToDate = "";

        });
        $('#IsDateFilter').on('ifUnchecked', function () {
            IsDateFilter = false;
            $("#StartDate").val("");
            $("#StartDate").prop("readonly", "");
            $("#EndDate").val("");
            $("#EndDate").prop("readonly", "");
            FromDate = "";
            ToDate = "";

        });

        $("#StartDate").datetimepicker({
            format: 'DD-MMM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {
            // console.log(e.date);
            // fromDate = $('#FromDatePickerWidget').val();
            var selectedDate = e.date._d;
            console.log(selectedDate.getMonth() + 1);
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            console.log(lengthOfMonth);
            console.log(selectedDate.getMonth() + 1);
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            console.log(lengthOfMonth);
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);

            var newFromDate = selectedDate.getDate() + "-" + months[selectedDate.getMonth()] + "-" + selectedDate.getFullYear();
            console.log("newDate", newFromDate);
            FromDate = newFromDate;
            PreviouslySelectedFromPickerDate = newFromDate;
            console.log("FromDate", FromDate);
            ToDate = PreviouslySelectedToPickerDate;
        });
        $("#EndDate").datetimepicker({


            format: 'DD-MMM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {

            var selectedDate = e.date._d;

            console.log(selectedDate.getMonth() + 1);
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            console.log(lengthOfMonth);
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);

            var newToDate = selectedDate.getDate() + "-" + months[selectedDate.getMonth()] + "-" + selectedDate.getFullYear();
            console.log("newToDate", newToDate);
            ToDate = newToDate;
            PreviouslySelectedToPickerDate = newToDate;
            console.log("ToDate in picker", ToDate);
            FromDate = PreviouslySelectedFromPickerDate;

        });

        $("#Stall").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(StallList, request.term);
                response(results.slice(0, 50));
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                console.log("ui.item", ui.item.label);
                $("#Stall").val(ui.item.label);
                SetSpecificCode("stall", ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $("#ProductName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(ProductList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#ProductName").val(ui.item.label);
                SetSpecificCode("Product",ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $("#Category").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(CategoryList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#Category").val(ui.item.label);

                SetSpecificCode("Category",ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $("#PartyName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(PartyList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#PartyName").val(ui.item.label);
                SetSpecificCode("Party",ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });


        $('#IsBatchWise').on('ifChecked', function () {
            //console.log("checked");
            IsBatch = true;

        });

        $('#IsStall').on('ifChecked', function () {
            IsParty = true;
            $("#Stall").val('All');
            $("#Stall").prop("readonly", "readonly");
            $("#StallCode").val('0');
        });

        $('#IsStall').on('ifUnchecked', function () {

            IsParty = false;
            $("#Stall").val('');
            $("#Stall").prop("readonly", "");
            $("#StallCode").val('0');
        });

        $('#IsCategory').on('ifChecked', function () {
            //console.log("checked");
            IsCategory = true;
            $("#Category").val("All");
            $("#Category").prop("readonly", "readonly");
            $("#CategoryCode").val(0);
            //GetAllProducts(0);
            $('#IsProduct').trigger('ifChecked');
            var CheckBoxEle = $("#IsProductDiv").find('.icheckbox_flat-green');
            $(CheckBoxEle).addClass("checked");

        });
        $('#IsProduct').on('ifChecked', function () {
            //console.log("checked");
            IsProduct = true;
            $("#ProductName").val("All");
            $("#ProductName").prop("readonly", "readonly");
            $("#ProductCode").val(0);
            //GetAllProducts(0);

        });
        $('#IsParty').on('ifChecked', function () {
            //console.log("checked");
            IsParty = true;
            //$("#PartyName").val("All");
            //$("#PartyName").prop("readonly", "readonly");
            //$("#PartyCode").val(0);
            $("#PartyName").val('All');
            $("#PartyName").prop("readonly", "readonly");
            $("#PartyCode").val('0');
        });

        $('#IsParty').on('ifUnchecked', function () {
            //console.log("checked");
            IsParty = false;
            //$("#PartyName").val("");
            //$("#PartyName").prop("readonly", "");
            //$("#PartyCode").val("");
            $("#PartyName").val('');
            $("#PartyName").prop("readonly", "");
            $("#PartyCode").val('');
        });


        $('#IsProduct').on('ifUnchecked', function () {
            //console.log("checked");
            IsProduct = false;
            $("#ProductName").val("");
            $("#ProductName").prop("readonly", "");
            $("#ProductCode").val("");
        });
        $('#IsCategory').on('ifUnchecked', function () {
            //console.log("checked");
            IsCategory = false;
            $("#Category").val("");
            $("#Category").prop("readonly", "");
            $("#CategoryCode").val("");
            GetAllCategory();
        });
        $('#IsBatchWise').on('ifUnchecked', function () {
            //console.log("unchecked"); //Do your code
            IsBatch = false;
        });
        
        $('#CurrentStock').click(function () {
            $(".preloader").show();
            $("#StockTypeLabel").val("Current Stock");
            var DateError = false;
            if (FromDate != "" && FromDate != null && ToDate != "") {

                var d1 = toDate(FromDate);
                var d2 = toDate(ToDate);

                if (d1 > d2) {
                    DateError = true;
                    $(".preloader").hide();
                    OpenDialog("dialogMessage", "From Date should be less than To Date!", "false");
                }
                else {
                    DateError = false;

                }
            }
            else {
                DateError = false;
                if (IsDateFilter == false) {

                }
                if (FromDate == "" || FromDate == null) {
                    FromDate = "All";
                }
                if (ToDate == "" || ToDate == null) {
                    ToDate = "All";
                }
            }


            var ProductCode = $("#ProductCode").val();
            var StallCode = $("#StallCode").val();
            if (StallCode == "" || StallCode == null) {
                DateError = true;
                $(".preloader").hide();
                OpenDialog("dialogMessage", "Please select stall", "false");
            }
            if (ProductCode == "" || ProductCode == null) {
                ProductCode = "0";
            }
            if (DateError == false) {
                GetStockDetails(FromDate, ToDate, ProductCode, StallCode);
            }
        });

        $("#btnExport").on('click', function () {
            //var tableToExcel = new TableToExcel();
            // tableToExcel.render("grid");
            var UserTypeStr = "StockReport";

            console.log("in export gridExport", StockGrid);
            var tableString = "<thead><tr>";

            if (IsBatch == false) {
                tableString += "<th>S.No.</th>";
                tableString += "<th>Party Code</th>";
                tableString += "<th>Party Name</th>";
                tableString += "<th>Category</th>";
                tableString += "<th>Code</th>";
                tableString += "<th>Product Name</th>";
                tableString += "<th>Stock In</th>";
                tableString += "<th>Stock Out</th>";                                
                tableString += "<th>Stock Balance</th>";
                tableString += "<th>RCP</th>";
                tableString += "<th>Total</th>";                               
                tableString += "</tr></thead><tbody>";
                for (var i = 0; i < StockGrid.length; i++) {
                    tableString += "<tr>";
                    tableString += "<td>" + StockGrid[i].SNo + "</td>";
                    tableString += "<td>" + StockGrid[i].PartyCode + "</td>";
                    tableString += "<td>" + StockGrid[i].PartyName + "</td>";
                    console.log("StockGrid[i].Catgeory", StockGrid[i].Category);
                    tableString += "<td>" + StockGrid[i].Category + "</td>";
                    console.log("StockGrid[i].ProductCode", StockGrid[i].ProductCode);

                    tableString += "<td class=formatText>" + StockGrid[i].ProductCode.toString() + "</td>";
                    tableString += "<td>" + StockGrid[i].ProductName + "</td>";
                    
                    tableString += "<td>" + StockGrid[i].StockIn + "</td>";
                    tableString += "<td>" + StockGrid[i].StockOut + "</td>";
                    tableString += "<td>" + StockGrid[i].Qty + "</td>";
                    tableString += "<td>" + StockGrid[i].RateOrDP + "</td>";
                    tableString += "<td>" + StockGrid[i].DPStockValue + "</td>";
                    
                    tableString += "</tr>";
                    

                }
                tableString += "<tr>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";

                tableString += "<td class=formatText> </td>";
                tableString += "<td>Totals</td>";

                tableString += "<td>" + TotalStockIn + "</td>";
                tableString += "<td>" + TotalStockout + "</td>";
                tableString += "<td>" + TotalStockbalance + "</td>";
                tableString += "<td></td>";
                tableString += "<td>" + NetTotal + "</td>";

                tableString += "</tr>";
            }
            else{
                tableString += "<th>S.No.</th>";
                tableString += "<th>Party Code</th>";
                tableString += "<th>Party Name</th>";
                tableString += "<th>Category</th>";
                tableString += "<th>Product Code</th>";
                tableString += "<th>Product Name</th>";
                
                tableString += "<th>Expired</th>";
                tableString += "<th>Exp. Date</th>";
                tableString += "<th>Mfg. Date</th>";
                
                tableString += "<th>Stock In</th>";
                tableString += "<th>Stock Out</th>";
                tableString += "<th>Stock Balance</th>";
                tableString += "<th>RCP</th>";
                tableString += "<th>Total</th>";
                tableString += "</tr></thead><tbody>";

                for (var i = 0; i < StockGrid.length; i++) {
                    tableString += "<tr>";
                    tableString += "<td>"+StockGrid[i].SNo+"</td>";
                    tableString += "<td>"+StockGrid[i].PartyCode+"</td>";
                    tableString += "<td>" + StockGrid[i].PartyName + "</td>";
                    console.log("StockGrid[i].Catgeory", StockGrid[i].Category);
                    tableString += "<td>" + StockGrid[i].Category + "</td>";
                  //  console.log("StockGrid[i].ProductCode.toString()", StockGrid[i].ProductCode.toString());
                    tableString += "<td class=formatText>" + StockGrid[i].ProductCode + "</td>";
                    tableString += "<td>" + StockGrid[i].ProductName + "</td>";

                    tableString += "<td>" + StockGrid[i].Expired + "</td>";
                    tableString += "<td>" + StockGrid[i].ExpDate + "</td>";
                    tableString += "<td>" + StockGrid[i].MfgDate + "</td>";
                    
                    
                    tableString += "<td>" + StockGrid[i].StockIn + "</td>";
                    tableString += "<td>" + StockGrid[i].StockOut + "</td>";
                    tableString += "<td>" + StockGrid[i].Qty + "</td>";
                    tableString += "<td>" + StockGrid[i].RateOrDP + "</td>";
                    tableString += "<td>" + StockGrid[i].DPStockValue + "</td>";
                    
                    tableString += "</tr>";
                }
                tableString += "<tr>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";

                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td> </td>";
                tableString += "<td>Totals</td>";

                tableString += "<td>" + TotalStockIn + "</td>";
                tableString += "<td>" + TotalStockout + "</td>";
                tableString += "<td>" + TotalStockbalance + "</td>";
                tableString += "<td></td>";
                tableString += "<td>" + NetTotal + "</td>";

                tableString += "</tr>";

                }

                tableString += "</tbody>";
                $("#gridExport").empty();
                $("#gridExport").append(tableString);
                tableToExcel('gridExport', UserTypeStr + "_Export");


                //$('<table>').append(table.$('tr').clone()).table2excel({
                //    //    exclude: ".noExl",
                //    //    name: UserTypeStr + "_Export",
                //    //    filename: UserTypeStr + "_Export",
                //    //    fileext: ".xls",
                //});
            //$("#grid").table2excel({
            //    exclude: ".noExl",
            //    name: UserTypeStr + "_Export",
            //    filename: UserTypeStr + "_Export",
            //    fileext: ".xls",
            //});
            });






    });
    function toDate(dateStr) {
        var parts = dateStr.split("-");
        return new Date(parts[2], parts[1] - 1, parts[0]);
    }
    function SetSpecificCode(type, label) {
        if (type == "Product") {
            for (var i = 0; i < FullProductList.length; i++) {
                if (FullProductList[i].ProductName == label) {
                    $("#ProductCode").val(parseFloat(FullProductList[i].ProductCodeStr));
                    break;
                }
            }
        }
        if (type == "Category") {
            for (var i = 0; i < FullCategoryList.length; i++) {
                if (FullCategoryList[i].CategoryName == label) {
                    $("#CategoryCode").val(FullCategoryList[i].CategoryId);
                    GetAllProducts(FullCategoryList[i].CategoryId);
                    break;
                }
            }
        }
        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#PartyCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
        if (type == "stall") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#StallCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
    }

    function GetAllProducts(catId) {
        //console.log("FullProductList", FullProductList);
        //if (FullProductList != null && FullProductList != undefined && FullProductList != "") {
        //    ProductList = [];
        //    var i = 0;
        //    if (catId == 0) {
        //        for (i = 0; i < FullProductList.length; i++) {
        //            //console.log("data[i]", data[i]);
        //            ProductList.push(FullProductList[i].ProductName);
        //        }
        //    }
        //    else {
        //        for (i = 0; i < FullProductList.length; i++) {
        //            //console.log("data[i]", data[i]);
        //            if (FullProductList[i].CategoryId == parseInt(catId)) {
        //                ProductList.push(FullProductList[i].ProductName);
        //            }
        //        }
        //    }
        //}
        $.ajax({
            url: '/Report/GetAllProduct',
            dataType: "json",
            method: 'POST',
            async: false,
            data: { 'CategoryCode': catId },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullProductList = data;
                ProductList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        ProductList.push(data[i].ProductName);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.log("xhr.responseText:", xhr.responseText);
                //var responseText = jQuery.parseJSON(xhr.responseText);
                //console.log("responseText.ExceptionType:", responseText.ExceptionType);
                //console.log("responseText.Message:", responseText.Message);
            }
        });
    }


    function GetAllParty() {
        $.ajax({
            url: '/Report/GetAllPartyListForReports',
            dataType: 'JSON',
            method: 'GET',
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullPartyList = data;
                PartyList = [];
                StallList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        if (data[i].GroupId == 100) {
                            PartyList.push(data[i].PartyName);
                        }
                        else if (data[i].GroupId == 105) {
                            StallList.push(data[i].PartyName);
                        }
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    function GetAllCategory() {
        $.ajax({
            url: '/Report/GetAllCategory',
            dataType: 'JSON',
            method: 'GET',
            async: false,
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullCategoryList = data;
                CategoryList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        CategoryList.push(data[i].CategoryName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    function OpenDialog(dialogId, Message, isConfirmation) {
        $("#" + dialogId).empty();
        $("#" + dialogId).append('<p>' + Message + '</p>');
        if (isConfirmation == "true") {
            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "Yes",
                    id: "btnYes" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = true;
                        $("#" + dialogId).dialog("close");


                    }
                },
                {
                    text: "No",
                    id: "btnNo" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = false;
                        $("#" + dialogId).dialog("close");
                    }
                }
                ]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }
        else {


            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "OK",
                    id: "btn" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}

                        $("#" + dialogId).dialog("close");


                    }
                }]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }

    }
    function fillGrid() {
        console.log("StockGrid", StockGrid);

               // StockGrid = StockGrid.splice(1);

        $("#noRecord").hide();
        //console.log("ProductGrid", ProductGrid);
        if (grid != null) {
            grid.destroy();
            $('#grid').empty();

        }

            grid = $('#grid').grid({
                dataSource: StockGrid,
                uiLibrary: 'bootstrap',
                headerFilter: true,
                columns: [
                    { field: 'SNo',width:80, title: 'S.No.', sortable: true, hidden: false, filterable: true },
                    { field: 'ProductCode', width: 80, title: 'Code', sortable: true, hidden: false, filterable: true },
                    { field: 'ProductName', width: 150, title: 'Product Name', sortable: true, hidden: false, filterable: true },
                    { field: 'StockDate', width: 150, title: 'Stock Date', sortable: true, hidden: false, filterable: true },
                    { field: 'OpStock', width: 80, title: 'Opening Stock', sortable: true, hidden: false, filterable: true },
                    { field: 'InStock', width: 80, title: 'Stock In', sortable: true, hidden: false, filterable: true },
                    { field: 'StockOut', width: 80, title: 'Stock Out', sortable: true, hidden: false, filterable: true },
                    { field: 'StockWaste', width: 80, title: 'Stock Waste', sortable: true, hidden: false, filterable: true },
                    { field: 'ClsStock', width: 80, title: 'Closing Stock', sortable: true, hidden: false, filterable: true }
                            
                ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });


        
        
        $(".loader").hide();
    }

    function GetStockDetails(FromDate, ToDate, ProductCode, PartyCode) {       
            $.ajax({
                url: '@Url.Action("GetStockReport", "Report")',
                type: 'POST',
                data: { "FromDate":FromDate,"ToDate":ToDate,"ProductCode": ProductCode, "PartyCode": PartyCode},
                dataType: "json",
                success: function (objResult) {
                    StockGrid = [{}];
                    if (objResult.length > 0) {
                        StockGrid = StockGrid.splice(1);

                        for (var i = 0; i < objResult.length; i++) {                            
                            StockGrid.push({
                                "SNo": i + 1,
                                "ProductCode": objResult[i].ProductCode,
                                "ProductName": objResult[i].ProductName,
                                "StockDate": objResult[i].StockDate,
                                "OpStock": objResult[i].OpStock,
                                "InStock": objResult[i].InStock,
                                "StockOut": objResult[i].StockOut,
                                "StockWaste": objResult[i].StockWaste,
                                "ClsStock": objResult[i].ClsStock
                            });
                        }
                        tableStockGrid = StockGrid;


                        $("#noRecord").hide();

                    }
                    else {

                        $("#noRecord").show();
                    }
                    fillGrid();
                    $(".preloader").hide();

                },
                error: function (xhr, data) {
                    //  return false;
                    console.log(xhr);
                    console.log("Error:", data);
                }
            });



    }
</script>

<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Report</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">

            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Stock Report</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="distributorForm" method="post" name="distributorForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">
                    @Html.HiddenFor(m => m.PartyCode,new {id="PartyCode",name="PartyCode" })
                        @Html.HiddenFor(m => m.CategoryCode, new { id = "CategoryCode", name = "CategoryCode" })
                    @Html.HiddenFor(m => m.ProductCode, new { id = "ProductCode", name = "ProductCode" })
                        @Html.HiddenFor(m => m.StallCode, new { id = "StallCode", name = "StallCode" })
                        
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group" style="margin-bottom:0px">
                                    <label class="control-label col-lg-2 col-md-2 col-sm-4 col-xs-12" for="category-name">
                                        Select Date @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-4 col-md-4 col-sm-8 col-xs-12" style="padding-left: 0.5%;">
                                        <div class="form-group">
                                            @Html.TextBoxFor(m => m.StartDate, new { name = "StartDate", id = "StartDate", tabindex = "1", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>

                                    <label class="control-label col-lg-1 col-md-2 col-sm-3 col-xs-3" for="category-name">
                                        To  @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-4 col-md-4 col-sm-8 col-xs-12" style="padding-left: 0.5%;">
                                        @Html.TextBoxFor(m => m.EndDate, new { name = "EndDate", id = "EndDate", tabindex = "2", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                    <div id="IsDateFilterDiv" class="col-lg-1 col-md-1 col-sm-1 col-xs-3" style="padding-left: 0.5%;">
                                        <label>
                                            <input type="checkbox" id="IsDateFilter" name="IsDateFilter" class="flat" tabindex="3" />

                                        </label>
                                    </div>
                                </div>
                            </div>

                        </div>
                        
                        
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-2 col-md-2 col-sm-3 col-xs-3" for="category-name">
                                        Select Stall
                                    </label>
                                    <div class="col-lg-10 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.Stall, new { name = "Stall", id = "Stall", tabindex = "5", @class = "form-control col-lg-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsPartyDiv">
                                        <label>
                                            @*<input type="checkbox" id="IsStall" name="IsStall" class="flat" tabindex="6" />*@
                                            &nbsp;

                                        </label>

                                    </div>
                                </div>
                            </div>




                        </div>
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-2 col-md-2 col-sm-3 col-xs-3" for="category-name">
                                        Enter Product 
                                    </label>
                                    <div class="col-lg-10 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.ProductName, new { name = "ProductName", id = "ProductName", tabindex = "3", @class = "form-control col-lg-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsProduct" name="IsProduct" class="flat" tabindex="4" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-12">
                           <div class="col-lg-8">
                                <div class="form-group">
                                    
                                    
                                        
                                        <a style="cursor:pointer;color:blue;text-decoration:underline" id="CurrentStock">Get Stock</a>
                                    

                                </div>
                            </div>
                            <div class="col-lg-4" id="btnExport">
                                @*<img src="~/images/ExcelImage.jpg" style="height: 25px;width: 8%;cursor:pointer" />*@
                            </div>
                            </div>
                            <div class="col-lg-12">
                                <br />
                                <div>
                                    <b><span id="StockTypeLabel"></span></b>
                                </div>
                                <br />
                                <div class="form-group">
                                    <br />@*<br /><br /><center><div class="loader" style="display:none"></div></center>*@
                                        <table class="table bootstrap-datatable" id="grid"></table>
                                        <center><span style="display:none" id="noRecord">No Stock Found</span></center>
                                   
                                </div>
                            </div>
                        
                           
                       <table id="gridExport" style="display:none"></table>
                    </form>
                </div>

            </div>
        </div>
    </div>
    <div id="dialogMessage" title="Message">

    </div>

</div>
